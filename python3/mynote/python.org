* 目录
** python环境搭建
*** flycheck flycheck-pyflakes
    flycheck为语法检查插件，依赖flycheck-pyflakes。

    在init.el中的设置为：
    (required 'flycheck)
    (add-hook 'after-init-hook 'flycheck-mode)

*** virtualenvwrapper jedi
    jedi为自动补全插件,需要安装virtualenvwrapper。

    在init.el中的设置为：
    (setq elpy-rpc-backend "jedi")

*** elpy(Emacs Lisp Python Environment)
    elpy插件提供了几乎所有的功能:
    自动缩进
    语法高亮
    自动补全
    语法检查
    REPL集成
    虚拟环境支持，以及更多其他功能

    在init.el中的设置为：
    (elpy-p)

** 基本数据类型和基本语法
*** 数据类型
**** 1) Number(数字)
     python3支持int,float,bool,complex(复数)
     在python3中只有一种整数类型int,没有python2中的long
     内置函数type()可以查看对象的类型
**** 2) String(数组)
#+BEGIN_SRC python
  text1=r"hello \n world" #在字符喘前加r或R表示自然字符串,\n不会换行,会被输出。
  print(text1)
  text2=u"hello world"  #python允许处理unicode字符串,加前缀u或U
  print(text2)
  word="这是一个字符串" 
  print(word)
  sentence="这是一个句子"
  print(sentence)
  paragragh="""这是一个段落
  可以由多行组成"""
  print(paragragh)
#+END_SRC

#+BEGIN_SRC python
  str = 'Runoob'

  print (str)          # 输出字符串
  print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
  print (str[0])       # 输出字符串第一个字符
  print (str[2:5])     # 输出从第三个开始到第五个的字符
  print (str[2:])      # 输出从第三个开始的后的所有字符
  print (str * 2)      # 输出字符串两次
  print (str + "TEST") # 连接字符串
  print (str[2:] * 2)  # 输出从第三个开始后的所有字符两次
#+END_SRC

#+BEGIN_SRC python
  a=1994
  b="yuanzishuai"
  #如果直接写print(a+b)或print(b+a)会报错
  print(b+str(a))
  print(b+repr(a))#repr()函数是反引号的替代品
#+END_SRC
**** 3) List(列表)
     列表写在[]里,元素用,分开。列表中的元素可以不相同。
#+BEGIN_SRC python
  list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
  tinylist = [123, 'runoob']

  print (list)            # 输出完整列表
  print (list[0])         # 输出列表第一个元素
  print (list[1:3])       # 从第二个开始输出到第三个元素
  print (list[2:])        # 输出从第三个元素开始的所有元素
  print (tinylist * 2)    # 输出两次列表
  print (list + tinylist) # 连接列表
#+END_SRC

注意：
    1) List写在方括号之间，元素用逗号隔开。
    2) 和字符串一样，list可以被索引和切片。
    3) List可以使用+操作符进行拼接。
    4) List中的元素是可以改变的。

**** 4) Tuple(元组)
     元组和列表类似,元组写在()里,元素之间用,分开。元组中的元素也可以不相同。但是元组中的数据不能被修改。

#+BEGIN_SRC python
tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )
tinytuple = (123, 'runoob')

print (tuple)             # 输出完整元组
print (tuple[0])          # 输出元组的第一个元素
print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
print (tuple[2:])         # 输出从第三个元素开始的所有元素
print (tinytuple * 2)     # 输出两次元组
print (tuple + tinytuple) # 连接元组

tup1 = ();                # 表示空的元组
tup2 = (20,);              # 表示一个元素的元组,逗号不能省略
#+END_SRC

string、list和tuple都属于sequence（序列）。
注意：
    1) 与字符串一样，元组的元素不能修改。
    2) 元组也可以被索引和切片，方法一样。
    3) 注意构造包含0或1个元素的元组的特殊语法规则。
    4) 元组也可以使用+操作符进行拼接。
**** 5) Sets(集合)
      集合（set）是一个无序不重复元素的序列。
      基本功能是进行成员关系测试和删除重复元素。
      可以使用大括号({})或者 set()函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 

#+BEGIN_SRC python
  student = ({'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'})

  print(student)   # 输出集合，重复的元素被自动去掉

  # 成员测试
  if('Rose' in student) :
      print('Rose 在集合中')
  else :
      print('Rose 不在集合中')

  # set可以进行集合运算
  a = set('abracadabra')
  b = set('alacazam')

  print(a)
  print(a - b)     # a和b的差集
  print(a | b)     # a和b的并集
  print(a & b)     # a和b的交集
  print(a ^ b)     # a和b中不同时存在的元素
#+END_SRC

**** 6) Dictionary(字典)
     字典（dictionary）是Python中另一个非常有用的内置数据类型。
     列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
     字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。
     键(key)必须使用不可变类型。
     在同一个字典中，键(key)必须是唯一的。 
#+BEGIN_SRC python
  # -*- coding:utf-8 -*-
  dict = {}
  dict['one'] = "1 - 菜鸟教程"
  dict[2]     = "2 - 菜鸟工具"

  tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}

  print (dict['one'])       # 输出键为 'one' 的值
  print (dict[2])           # 输出键为 2 的值
  print (tinydict["name"])  # 输出键为 "name" 的值
  print (tinydict)          # 输出完整的字典
  print (tinydict.keys())   # 输出所有键
  print (tinydict.values()) # 输出所有值
#+END_SRC

     构造函数 dict() 可以直接从键值对序列中构建字典如下：
#+BEGIN_SRC python
  dict1=dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])
  print(dict1)

  dict2={x:x**2 for x in [2,3,4]}
  print(dict2)

  dict3=dict(Runoob=1,Google=2,Taobao=3)
  print(dict3)
#+END_SRC

注意：
     1) 字典是一种映射类型，它的元素是键值对。
     2) 字典的关键字必须为不可变类型，且不能重复。
     3) 创建空字典使用 { }。

**** python数据类型转换
| 函数                  | 描述                                            |
|-----------------------+-------------------------------------------------|
| int(x[,base])         | 将x转换为一个整数                               |
| float(x)              | 将x转换到一个浮点数                             |
| complex(real [,imag]) | 创建一个复数                                    |
| str(x)                | 将对象x转换为字符                               |
| repr(x)               | 将对象x转换为表达式字符串                       |
| eval(str)             | 用来计算字符串中有效python表达式,并返回一个对象 |
| tuple(s)              | 将序列s转换为一个元组                           |
| list(s)               | 将序列s转换为一个列表                           |
| set(s)                | 将序列s转换为一个可变集合                       |
| dict(d)               | 创建一个字典。d必须是一个序列(key,value)元组    |
| frozenset(s)          | 转换为不可变集合                                |
| chr(x)                | 将一个整数转换为一个字符                        |
| unichr(x)             | 将一个整数转换为unicode字符                     |
| ord(x)                | 将一个字符转换为它的整数值                      |
| hex(x)                | 将一个整数转换为一个十六进制字符串              |
| oct(x)                | 将一个整数转换为一个八进制字符串                |


*** tips：对象有类型，变量无类型。
*** 四舍五入的函数:
#+BEGIN_SRC python
  round(10/3,4) #保存小数点后四位
#+END_SRC
    
*** 字符集的声明：
#+BEGIN_SRC python
  # -*- coding:utf-8 -*-  
  print("声明之后就可以打中文了")
#+END_SRC

*** 等待用户输入和输出
#+BEGIN_SRC python
  yourname=input("\n\n input your name:") #在字符串前面加r是没有用的
  print(yourname)

  print(yourname,end=" ") #表示不换行输出
  print("is best")
#+END_SRC

*** if...elif...else语句
#+BEGIN_SRC python
  key=input("please input True or False:")

  if key:
      print("True")
  elif key:
      print("elif key")
  else:
      print("False")
#+END_SRC
** 遍历技巧
在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来：
#+BEGIN_SRC python
knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
    print(k, v)
#+END_SRC

结果：
gallahad the pure
robin the brave

在序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：
#+BEGIN_SRC python
for i, v in enumerate(['tic', 'tac', 'toe']):
     print(i, v)
#+END_SRC

结果：
0 tic
1 tac
2 toe


同时遍历两个或更多的序列，可以使用 zip() 组合：
#+BEGIN_SRC python
  questions = ['name', 'quest', 'favorite color']
  answers = ['lancelot', 'the holy grail', 'blue']
  for q, a in zip(questions, answers):
       print('What is your {0}?  It is {1}.'.format(q, a))
#+END_SRC

结果：
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.


要反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数：
#+BEGIN_SRC python
  # -*- coding = utf-8 -*-

  if __name__ == '__main__':
     print('程序自身在运行')
  else:
     print('我来自另一模块')

#+END_SRC

结果:
9
7
5
3
1


要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值：
#+BEGIN_SRC python
  basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
  for f in sorted(set(basket)):
       print(f)
#+END_SRC

结果：
apple
banana
orange
pear
