% Created 2017-03-29 周三 17:30
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\date{\today}
\title{python}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 25.1.1 (Org mode 8.2.10)}}
\begin{document}

\maketitle
\tableofcontents

\section{目录}
\label{sec-1}
\subsection{python环境搭建}
\label{sec-1-1}
\subsubsection{flycheck flycheck-pyflakes}
\label{sec-1-1-1}
flycheck为语法检查插件，依赖flycheck-pyflakes。

在init.el中的设置为：
(required 'flycheck)
(add-hook 'after-init-hook 'flycheck-mode)

\subsubsection{virtualenvwrapper jedi}
\label{sec-1-1-2}
jedi为自动补全插件,需要安装virtualenvwrapper。

在init.el中的设置为：
(setq elpy-rpc-backend "jedi")

\subsubsection{elpy(Emacs Lisp Python Environment)}
\label{sec-1-1-3}
elpy插件提供了几乎所有的功能:
自动缩进
语法高亮
自动补全
语法检查
REPL集成
虚拟环境支持，以及更多其他功能

在init.el中的设置为：
(elpy-p)

\subsection{基本数据类型和基本语法}
\label{sec-1-2}
\subsubsection{数据类型}
\label{sec-1-2-1}
\begin{enumerate}
\item 1) Number(数字)
\label{sec-1-2-1-1}
python3支持int,float,bool,complex(复数)
在python3中只有一种整数类型int,没有python2中的long
内置函数type()可以查看对象的类型
\item 2) String(数组)
\label{sec-1-2-1-2}
\begin{verbatim}
text1=r"hello \n world" #在字符喘前加r或R表示自然字符串,\n不会换行,会被输出。
print(text1)
text2=u"hello world"  #python允许处理unicode字符串,加前缀u或U
print(text2)
word="这是一个字符串" 
print(word)
sentence="这是一个句子"
print(sentence)
paragragh="""这是一个段落
可以由多行组成"""
print(paragragh)
\end{verbatim}

\begin{verbatim}
str = 'Runoob'

print (str)          # 输出字符串
print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
print (str[0])       # 输出字符串第一个字符
print (str[2:5])     # 输出从第三个开始到第五个的字符
print (str[2:])      # 输出从第三个开始的后的所有字符
print (str * 2)      # 输出字符串两次
print (str + "TEST") # 连接字符串
print (str[2:] * 2)  # 输出从第三个开始后的所有字符两次
\end{verbatim}

\begin{verbatim}
a=1994
b="yuanzishuai"
#如果直接写print(a+b)或print(b+a)会报错
print(b+str(a))
print(b+repr(a))#repr()函数是反引号的替代品
\end{verbatim}
\item 3) List(列表)
\label{sec-1-2-1-3}
列表写在[]里,元素用,分开。列表中的元素可以不相同。
\begin{verbatim}
list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
tinylist = [123, 'runoob']

print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连接列表
\end{verbatim}

注意：
\begin{enumerate}
\item List写在方括号之间，元素用逗号隔开。
\item 和字符串一样，list可以被索引和切片。
\item List可以使用+操作符进行拼接。
\item List中的元素是可以改变的。
\end{enumerate}

\item 4) Tuple(元组)
\label{sec-1-2-1-4}
元组和列表类似,元组写在()里,元素之间用,分开。元组中的元素也可以不相同。但是元组中的数据不能被修改。

\begin{verbatim}
tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )
tinytuple = (123, 'runoob')

print (tuple)             # 输出完整元组
print (tuple[0])          # 输出元组的第一个元素
print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
print (tuple[2:])         # 输出从第三个元素开始的所有元素
print (tinytuple * 2)     # 输出两次元组
print (tuple + tinytuple) # 连接元组

tup1 = ();                # 表示空的元组
tup2 = (20,);              # 表示一个元素的元组,逗号不能省略
\end{verbatim}

string、list和tuple都属于sequence（序列）。
注意：
\begin{enumerate}
\item 与字符串一样，元组的元素不能修改。
\item 元组也可以被索引和切片，方法一样。
\item 注意构造包含0或1个元素的元组的特殊语法规则。
\item 元组也可以使用+操作符进行拼接。
\end{enumerate}
\item 5) Sets(集合)
\label{sec-1-2-1-5}
集合（set）是一个无序不重复元素的序列。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号(\{\})或者 set()函数创建集合，注意：创建一个空集合必须用 set() 而不是 \{ \}，因为 \{ \} 是用来创建一个空字典。 

\begin{verbatim}
student = ({'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'})

print(student)   # 输出集合，重复的元素被自动去掉

# 成员测试
if('Rose' in student) :
    print('Rose 在集合中')
else :
    print('Rose 不在集合中')

# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')

print(a)
print(a - b)     # a和b的差集
print(a | b)     # a和b的并集
print(a & b)     # a和b的交集
print(a ^ b)     # a和b中不同时存在的元素
\end{verbatim}

\item 6) Dictionary(字典)
\label{sec-1-2-1-6}
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用"\{ \}"标识，它是一个无序的键(key) : 值(value)对集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的。 
\begin{verbatim}
# -*- coding:utf-8 -*-
dict = {}
dict['one'] = "1 - 菜鸟教程"
dict[2]     = "2 - 菜鸟工具"

tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}

print (dict['one'])       # 输出键为 'one' 的值
print (dict[2])           # 输出键为 2 的值
print (tinydict["name"])  # 输出键为 "name" 的值
print (tinydict)          # 输出完整的字典
print (tinydict.keys())   # 输出所有键
print (tinydict.values()) # 输出所有值
\end{verbatim}

构造函数 dict() 可以直接从键值对序列中构建字典如下：
\begin{verbatim}
dict1=dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])
print(dict1)

dict2={x:x**2 for x in [2,3,4]}
print(dict2)

dict3=dict(Runoob=1,Google=2,Taobao=3)
print(dict3)
\end{verbatim}

注意：
\begin{enumerate}
\item 字典是一种映射类型，它的元素是键值对。
\item 字典的关键字必须为不可变类型，且不能重复。
\item 创建空字典使用 \{ \}。
\end{enumerate}

\item python数据类型转换
\label{sec-1-2-1-7}
\begin{center}
\begin{tabular}{ll}
函数 & 描述\\
\hline
int(x[,base]) & 将x转换为一个整数\\
float(x) & 将x转换到一个浮点数\\
complex(real [,imag]) & 创建一个复数\\
str(x) & 将对象x转换为字符\\
repr(x) & 将对象x转换为表达式字符串\\
eval(str) & 用来计算字符串中有效python表达式,并返回一个对象\\
tuple(s) & 将序列s转换为一个元组\\
list(s) & 将序列s转换为一个列表\\
set(s) & 将序列s转换为一个可变集合\\
dict(d) & 创建一个字典。d必须是一个序列(key,value)元组\\
frozenset(s) & 转换为不可变集合\\
chr(x) & 将一个整数转换为一个字符\\
unichr(x) & 将一个整数转换为unicode字符\\
ord(x) & 将一个字符转换为它的整数值\\
hex(x) & 将一个整数转换为一个十六进制字符串\\
oct(x) & 将一个整数转换为一个八进制字符串\\
\end{tabular}
\end{center}
\end{enumerate}


\subsubsection{tips：对象有类型，变量无类型。}
\label{sec-1-2-2}
\subsubsection{四舍五入的函数:}
\label{sec-1-2-3}
\begin{verbatim}
round(10/3,4) #保存小数点后四位
\end{verbatim}

\subsubsection{字符集的声明：}
\label{sec-1-2-4}
\begin{verbatim}
# -*- coding:utf-8 -*-  
print("声明之后就可以打中文了")
\end{verbatim}

\subsubsection{等待用户输入和输出}
\label{sec-1-2-5}
\begin{verbatim}
yourname=input("\n\n input your name:") #在字符串前面加r是没有用的
print(yourname)

print(yourname,end=" ") #表示不换行输出
print("is best")
\end{verbatim}

\subsubsection{if\ldots{}elif\ldots{}else语句}
\label{sec-1-2-6}
\begin{verbatim}
key=input("please input True or False:")

if key:
    print("True")
elif key:
    print("elif key")
else:
    print("False")
\end{verbatim}
% Emacs 25.1.1 (Org mode 8.2.10)
\end{document}
